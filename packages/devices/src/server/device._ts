import { domojs } from '../../device';

export namespace deviceTypes
{
    export class rest
    {
        public onServerSave(device, body)
        {
            var commands = <domojs.devices.Command[]>JSON.parse(body.commands);
            $.each(commands, function (command)
            {
                device.commands[command.name] = command.value;
            });
        }
    }

    export class virtual 
    {
        public name = 'virtual';
        public onChange()
        {
            return 'static';
        }
        public onAdd()
        {
            $('<li class="form-group">')
                .append('<div class="col-sm-2"><input type="text" class="commandName form-control" placeholder="Name" /></div>')
                .append('<div class="col-sm-10"><textarea class="commandScript form-control" placeholder="Function body"></textarea></div>')
                .appendTo('#commands');

        }
        public onSave(data)
        {
            var commands = [];
            $('#commands li').each(function (index, item)
            {
                commands.push({ name: $('.commandName', item).val(), value: $('.commandScript', item).val() });
            });
            data.append('commands', JSON.stringify(commands));
        }

        public onServerSave(device, body)
        {
            var commands = JSON.parse(body.commands);
            $.each(commands, function (index, command)
            {
                device.commands[command.name] = new Function(command.value);
            });
        }
    }


    export class virtualState
    {
        public onSave(data)
        {
            var states = [];

            $('#commands li').each(function (index, item)
            {
                states.push($('.state', item).val());
                if ($('.default').is(':checked'))
                    data.append('default', $('.state', item).val());
            });
            data.append('states', JSON.stringify(states));
        }
        public onServerSave(device, body)
        {
            var states = body.states;
            if (typeof (states) == 'string')
                var states = JSON.parse(states);
            device.status = function (callback)
            {
                callback(device['state']);
            };
            $.each(states, function (index, command)
            {
                device.commands[command] = function (callback)
                {
                    if (device['state'] != command)
                    {
                        device['state'] = command;
                        device.emit('status', command);
                        callback(200, device['state']);
                    }
                };
            });
        }
    };

    export class complexVirtual implements domojs.devices.DeviceType
    {
        public name = 'complex virtual';
        public onChange()
        {
            $('<li class="form-group">')
                .append('<div class="col-sm-2"><div class="form-control-static">Script</div></div>')
                .append('<div class="col-sm-10"><textarea rows="15" class="commandScript form-control" placeholder="Script"></textarea></div>')
                .appendTo('#commands');
            return 'dynamic';
        }
        public onSave(data)
        {
            data.append('script', $('.commandScript').val());
        }
        public onServerSave(device, body)
        {
            var deviceFunc = new Function('device', 'state', body.script);
            var fs = require('fs');
            var state = {
                save: function (callback)
                {
                    fs.writeFile(device.name + '.state.json', this, callback);
                }
            };
            fs.exists(device.name + '.state.json', function (exists)
            {
                if (exists)
                {
                    fs.readFile(device.name + '.state.json', function (err, deviceState)
                    {
                        if (err)
                            console.log(err);
                        else
                            deviceFunc(device, $.extend(state, deviceState));
                    });
                }
                else
                {
                    deviceFunc(device, state);
                }
            });
        }
    }
}