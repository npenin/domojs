//eslint-disable-next-line @typescript-eslint/ban-ts-comment
//@ts-ignore 6133
//eslint-disable-next-line @typescript-eslint/no-unused-vars
import type {Arguments, Argument0, Argument1, Argument2, Argument3, Argument4, Argument5, Argument6, Argument7, Argument8, Argument9, Argument10, Argument11, Argument12, Argument13, Argument14, Argument15, Argument16, Argument17 } from '@akala/core';
import {Metadata, type ICommandProcessor, Container, registerCommands} from "@akala/commands";
// eslint-disable-next-line @typescript-eslint/no-namespace
namespace library
{
	export interface container 
	{
		dispatch (cmd:'$init', ...args: [Argument0<typeof import('./server/commands/library/$init.ts').default>, Argument1<typeof import('./server/commands/library/$init.ts').default>]): ReturnType<typeof import('./server/commands/library/$init.ts').default>
		/** 
		  * Not meant to be invoked directly. Initializes the configuration when another command is executed via the akala CLI
		  * @typedef args0 - $container
		  * @typedef args1 - The root akala configuration
		  * @param {[args0, args1]} args
		  */
		dispatch (cmd:'$init-akala', ...args: [Argument1<typeof import('./server/commands/library/$init-akala.ts').default>]): ReturnType<typeof import('./server/commands/library/$init-akala.ts').default>
		dispatch (cmd:'add-credentials', ...args: [Argument0<typeof import('./server/commands/library/add-credentials.ts').default>, Argument1<typeof import('./server/commands/library/add-credentials.ts').default>, Argument2<typeof import('./server/commands/library/add-credentials.ts').default>]): ReturnType<typeof import('./server/commands/library/add-credentials.ts').default>
		dispatch (cmd:'add-folder', ...args: [Argument0<typeof import('./server/commands/library/add-folder.ts').default>, Argument1<typeof import('./server/commands/library/add-folder.ts').default>]): ReturnType<typeof import('./server/commands/library/add-folder.ts').default>
		dispatch (cmd:'add-library', ...args: [Argument0<typeof import('./server/commands/library/add-library.ts').default>]): ReturnType<typeof import('./server/commands/library/add-library.ts').default>
		dispatch (cmd:'add-organizer', ...args: [Argument0<typeof import('./server/commands/library/add-organizer.ts').default>, Argument1<typeof import('./server/commands/library/add-organizer.ts').default>]): ReturnType<typeof import('./server/commands/library/add-organizer.ts').default>
		/** 
		  * This command add a registered scrapper to a library. If you want to register a new scrapper, use the register-scrapper command
		  * @typedef args0 - The name of the library
		  * @typedef args1 - The name of the scrapper (as used when registered). You may list registered scrappers with `scrappers lists -g`
		  * @param {[args0, args1]} args
		  */
		dispatch (cmd:'add-scrapper', ...args: [Argument0<typeof import('./server/commands/library/add-scrapper.ts').default>, Argument1<typeof import('./server/commands/library/add-scrapper.ts').default>]): ReturnType<typeof import('./server/commands/library/add-scrapper.ts').default>
		dispatch (cmd:'browse', ...args: [Argument1<typeof import('./server/commands/library/browse.ts').default>, Argument2<typeof import('./server/commands/library/browse.ts').default>]): ReturnType<typeof import('./server/commands/library/browse.ts').default>
		dispatch (cmd:'dedupe', ...args: [Argument1<typeof import('./server/commands/library/dedupe.ts').default>, Argument2<typeof import('./server/commands/library/dedupe.ts').default>, Argument3<typeof import('./server/commands/library/dedupe.ts').default>]): ReturnType<typeof import('./server/commands/library/dedupe.ts').default>
		dispatch (cmd:'dropbox', ...args: [Argument1<typeof import('./server/commands/library/dropbox.ts').default>, Argument2<typeof import('./server/commands/library/dropbox.ts').default>]): ReturnType<typeof import('./server/commands/library/dropbox.ts').default>
		dispatch (cmd:'import', ...args: [Argument1<typeof import('./server/commands/library/import.ts').default>, Argument2<typeof import('./server/commands/library/import.ts').default>]): ReturnType<typeof import('./server/commands/library/import.ts').default>
		dispatch (cmd:'list-credentials', ...args: []): ReturnType<typeof import('./server/commands/library/list-credentials.ts').default>
		dispatch (cmd:'list-folders', ...args: [Argument0<typeof import('./server/commands/library/list-folders.ts').default>]): ReturnType<typeof import('./server/commands/library/list-folders.ts').default>
		dispatch (cmd:'list-libraries', ...args: []): ReturnType<typeof import('./server/commands/library/list-libraries.ts').default>
		dispatch (cmd:'list-organizers', ...args: []): ReturnType<typeof import('./server/commands/library/list-organizers.ts').default>
		dispatch (cmd:'list-scrappers', ...args: []): ReturnType<typeof import('./server/commands/library/list-scrappers.ts').default>
		dispatch (cmd:'register-organizer', ...args: [Argument2<typeof import('./server/commands/library/register-organizer.ts').default>, Argument3<typeof import('./server/commands/library/register-organizer.ts').default>]): ReturnType<typeof import('./server/commands/library/register-organizer.ts').default>
		dispatch (cmd:'register-scrapper', ...args: [Argument2<typeof import('./server/commands/library/register-scrapper.ts').default>, Argument3<typeof import('./server/commands/library/register-scrapper.ts').default>]): ReturnType<typeof import('./server/commands/library/register-scrapper.ts').default>
		dispatch (cmd:'reorganize', ...args: [Argument1<typeof import('./server/commands/library/reorganize.ts').default>, Argument2<typeof import('./server/commands/library/reorganize.ts').default>]): ReturnType<typeof import('./server/commands/library/reorganize.ts').default>
		dispatch (cmd:'rm-credentials', ...args: [Argument0<typeof import('./server/commands/library/rm-credentials.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-credentials.ts').default>
		dispatch (cmd:'rm-folder', ...args: [Argument0<typeof import('./server/commands/library/rm-folder.ts').default>, Argument1<typeof import('./server/commands/library/rm-folder.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-folder.ts').default>
		dispatch (cmd:'rm-library', ...args: [Argument0<typeof import('./server/commands/library/rm-library.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-library.ts').default>
		dispatch (cmd:'rm-organizer', ...args: [Argument0<typeof import('./server/commands/library/rm-organizer.ts').default>, Argument1<typeof import('./server/commands/library/rm-organizer.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-organizer.ts').default>
		dispatch (cmd:'rm-scrapper', ...args: [Argument0<typeof import('./server/commands/library/rm-scrapper.ts').default>, Argument1<typeof import('./server/commands/library/rm-scrapper.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-scrapper.ts').default>
		dispatch (cmd:'scrap', ...args: [Argument1<typeof import('./server/commands/library/scrap.ts').default>, Argument2<typeof import('./server/commands/library/scrap.ts').default>]): ReturnType<typeof import('./server/commands/library/scrap.ts').default>
		dispatch (cmd:'set-index-folder', ...args: [Argument0<typeof import('./server/commands/library/set-index-folder.ts').default>]): ReturnType<typeof import('./server/commands/library/set-index-folder.ts').default>
		dispatch (cmd:'transcode', ...args: [Argument0<typeof import('./server/commands/library/transcode.ts').default>, Argument1<typeof import('./server/commands/library/transcode.ts').default>, Argument2<typeof import('./server/commands/library/transcode.ts').default>, Argument3<typeof import('./server/commands/library/transcode.ts').default>]): ReturnType<typeof import('./server/commands/library/transcode.ts').default>
		dispatch (cmd:'update-index', ...args: [Argument1<typeof import('./server/commands/library/update-index.ts').default>, Argument2<typeof import('./server/commands/library/update-index.ts').default>, Argument3<typeof import('./server/commands/library/update-index.ts').default>]): ReturnType<typeof import('./server/commands/library/update-index.ts').default>
	}
	export interface proxy 
	{
		'$init'(...args: [Argument0<typeof import('./server/commands/library/$init.ts').default>, Argument1<typeof import('./server/commands/library/$init.ts').default>]): ReturnType<typeof import('./server/commands/library/$init.ts').default>
		/** 
		  * Not meant to be invoked directly. Initializes the configuration when another command is executed via the akala CLI
		  * @typedef args0 - $container
		  * @typedef args1 - The root akala configuration
		  * @param {[args0, args1]} args
		  */
		'$init-akala'(...args: [Argument1<typeof import('./server/commands/library/$init-akala.ts').default>]): ReturnType<typeof import('./server/commands/library/$init-akala.ts').default>
		'add-credentials'(...args: [Argument0<typeof import('./server/commands/library/add-credentials.ts').default>, Argument1<typeof import('./server/commands/library/add-credentials.ts').default>, Argument2<typeof import('./server/commands/library/add-credentials.ts').default>]): ReturnType<typeof import('./server/commands/library/add-credentials.ts').default>
		'add-folder'(...args: [Argument0<typeof import('./server/commands/library/add-folder.ts').default>, Argument1<typeof import('./server/commands/library/add-folder.ts').default>]): ReturnType<typeof import('./server/commands/library/add-folder.ts').default>
		'add-library'(...args: [Argument0<typeof import('./server/commands/library/add-library.ts').default>]): ReturnType<typeof import('./server/commands/library/add-library.ts').default>
		'add-organizer'(...args: [Argument0<typeof import('./server/commands/library/add-organizer.ts').default>, Argument1<typeof import('./server/commands/library/add-organizer.ts').default>]): ReturnType<typeof import('./server/commands/library/add-organizer.ts').default>
		/** 
		  * This command add a registered scrapper to a library. If you want to register a new scrapper, use the register-scrapper command
		  * @typedef args0 - The name of the library
		  * @typedef args1 - The name of the scrapper (as used when registered). You may list registered scrappers with `scrappers lists -g`
		  * @param {[args0, args1]} args
		  */
		'add-scrapper'(...args: [Argument0<typeof import('./server/commands/library/add-scrapper.ts').default>, Argument1<typeof import('./server/commands/library/add-scrapper.ts').default>]): ReturnType<typeof import('./server/commands/library/add-scrapper.ts').default>
		'browse'(...args: [Argument1<typeof import('./server/commands/library/browse.ts').default>, Argument2<typeof import('./server/commands/library/browse.ts').default>]): ReturnType<typeof import('./server/commands/library/browse.ts').default>
		'dedupe'(...args: [Argument1<typeof import('./server/commands/library/dedupe.ts').default>, Argument2<typeof import('./server/commands/library/dedupe.ts').default>, Argument3<typeof import('./server/commands/library/dedupe.ts').default>]): ReturnType<typeof import('./server/commands/library/dedupe.ts').default>
		'dropbox'(...args: [Argument1<typeof import('./server/commands/library/dropbox.ts').default>, Argument2<typeof import('./server/commands/library/dropbox.ts').default>]): ReturnType<typeof import('./server/commands/library/dropbox.ts').default>
		'import'(...args: [Argument1<typeof import('./server/commands/library/import.ts').default>, Argument2<typeof import('./server/commands/library/import.ts').default>]): ReturnType<typeof import('./server/commands/library/import.ts').default>
		'list-credentials'(...args: []): ReturnType<typeof import('./server/commands/library/list-credentials.ts').default>
		'list-folders'(...args: [Argument0<typeof import('./server/commands/library/list-folders.ts').default>]): ReturnType<typeof import('./server/commands/library/list-folders.ts').default>
		'list-libraries'(...args: []): ReturnType<typeof import('./server/commands/library/list-libraries.ts').default>
		'list-organizers'(...args: []): ReturnType<typeof import('./server/commands/library/list-organizers.ts').default>
		'list-scrappers'(...args: []): ReturnType<typeof import('./server/commands/library/list-scrappers.ts').default>
		'register-organizer'(...args: [Argument2<typeof import('./server/commands/library/register-organizer.ts').default>, Argument3<typeof import('./server/commands/library/register-organizer.ts').default>]): ReturnType<typeof import('./server/commands/library/register-organizer.ts').default>
		'register-scrapper'(...args: [Argument2<typeof import('./server/commands/library/register-scrapper.ts').default>, Argument3<typeof import('./server/commands/library/register-scrapper.ts').default>]): ReturnType<typeof import('./server/commands/library/register-scrapper.ts').default>
		'reorganize'(...args: [Argument1<typeof import('./server/commands/library/reorganize.ts').default>, Argument2<typeof import('./server/commands/library/reorganize.ts').default>]): ReturnType<typeof import('./server/commands/library/reorganize.ts').default>
		'rm-credentials'(...args: [Argument0<typeof import('./server/commands/library/rm-credentials.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-credentials.ts').default>
		'rm-folder'(...args: [Argument0<typeof import('./server/commands/library/rm-folder.ts').default>, Argument1<typeof import('./server/commands/library/rm-folder.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-folder.ts').default>
		'rm-library'(...args: [Argument0<typeof import('./server/commands/library/rm-library.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-library.ts').default>
		'rm-organizer'(...args: [Argument0<typeof import('./server/commands/library/rm-organizer.ts').default>, Argument1<typeof import('./server/commands/library/rm-organizer.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-organizer.ts').default>
		'rm-scrapper'(...args: [Argument0<typeof import('./server/commands/library/rm-scrapper.ts').default>, Argument1<typeof import('./server/commands/library/rm-scrapper.ts').default>]): ReturnType<typeof import('./server/commands/library/rm-scrapper.ts').default>
		'scrap'(...args: [Argument1<typeof import('./server/commands/library/scrap.ts').default>, Argument2<typeof import('./server/commands/library/scrap.ts').default>]): ReturnType<typeof import('./server/commands/library/scrap.ts').default>
		'set-index-folder'(...args: [Argument0<typeof import('./server/commands/library/set-index-folder.ts').default>]): ReturnType<typeof import('./server/commands/library/set-index-folder.ts').default>
		'transcode'(...args: [Argument0<typeof import('./server/commands/library/transcode.ts').default>, Argument1<typeof import('./server/commands/library/transcode.ts').default>, Argument2<typeof import('./server/commands/library/transcode.ts').default>, Argument3<typeof import('./server/commands/library/transcode.ts').default>]): ReturnType<typeof import('./server/commands/library/transcode.ts').default>
		'update-index'(...args: [Argument1<typeof import('./server/commands/library/update-index.ts').default>, Argument2<typeof import('./server/commands/library/update-index.ts').default>, Argument3<typeof import('./server/commands/library/update-index.ts').default>]): ReturnType<typeof import('./server/commands/library/update-index.ts').default>
	}
   export const meta={"name":"library","commands":[{"name":"$init","config":{"fs":{"inject":["params.0","params.1"],"path":"dist/server/commands/library/$init.js","source":"src/server/commands/library/$init.ts"},"cli":{"inject":["context","options.configPath","$container"],"options":{"configPath":{"normalize":true,"doc":"Path to the configuration file","needsValue":true}}},"":{"inject":["params.0","params.1"]}}},{"name":"$init-akala","config":{"fs":{"inject":["$container","params.0"],"path":"dist/server/commands/library/$init-akala.js","source":"src/server/commands/library/$init-akala.ts"},"cli":{"inject":["$container","context.state"]},"doc":{"description":"Not meant to be invoked directly. Initializes the configuration when another command is executed via the akala CLI","inject":["$container","The root akala configuration"]},"":{"inject":["$container","params.0"]}}},{"name":"add-credentials","config":{"fs":{"inject":["params.0","params.1","params.2"],"path":"dist/server/commands/library/add-credentials.js","source":"src/server/commands/library/add-credentials.ts"},"cli":{"inject":["options.host","options.username","options.password"],"options":{"name":{},"path":{"normalize":true}},"usage":"add credentials <host> <username> [password]"},"":{"inject":["params.0","params.1","params.2"]}}},{"name":"add-folder","config":{"fs":{"inject":["params.0","params.1"],"path":"dist/server/commands/library/add-folder.js","source":"src/server/commands/library/add-folder.ts"},"cli":{"inject":["options.name","options.path"],"options":{"name":{},"path":{"normalize":true}},"usage":"add folder <name> <path>"},"":{"inject":["params.0","params.1"]}}},{"name":"add-library","config":{"fs":{"inject":["params.0"],"path":"dist/server/commands/library/add-library.js","source":"src/server/commands/library/add-library.ts"},"cli":{"inject":["options.name"],"options":{"name":{}},"usage":"add library <name>"},"":{"inject":["params.0"]}}},{"name":"add-organizer","config":{"fs":{"inject":["params.0","params.1"],"path":"dist/server/commands/library/add-organizer.js","source":"src/server/commands/library/add-organizer.ts"},"cli":{"inject":["options.library","options.organizer"],"options":{"library":{},"organizer":{}},"usage":"add organizer <library> <organizer>"},"":{"inject":["params.0","params.1"]}}},{"name":"add-scrapper","config":{"fs":{"inject":["params.0","params.1"],"path":"dist/server/commands/library/add-scrapper.js","source":"src/server/commands/library/add-scrapper.ts"},"cli":{"inject":["options.name","options.type"],"options":{"name":{},"type":{}},"usage":"add scrapper <name> <type>"},"doc":{"description":"This command add a registered scrapper to a library. If you want to register a new scrapper, use the register-scrapper command","inject":["The name of the library","The name of the scrapper (as used when registered). You may list registered scrappers with `scrappers lists -g`"]},"":{"inject":["params.0","params.1"]}}},{"name":"browse","config":{"fs":{"inject":["$container","params.0","params.1"],"path":"dist/server/commands/library/browse.js","source":"src/server/commands/library/browse.ts"},"cli":{"inject":["$container","options.library","options.type","options.name","options.season","options.episode","options.album","options.artist"],"options":{"library":{},"type":{},"name":{"needsValue":true},"season":{"needsValue":true},"episode":{"needsValue":true},"album":{"needsValue":true},"artist":{"needsValue":true}},"usage":"browse <library> <type>"},"":{"inject":["$container","params.0","params.1"]}}},{"name":"dedupe","config":{"fs":{"inject":["$container","params.0","params.1","params.2"],"path":"dist/server/commands/library/dedupe.js","source":"src/server/commands/library/dedupe.ts"},"cli":{"inject":["$container","options.library","options.type","options.what-if"],"options":{"library":{},"type":{},"what-if":{}},"usage":"dedupe <library> [type]"},"":{"inject":["$container","params.0","params.1","params.2"]}}},{"name":"dropbox","config":{"fs":{"inject":["$container","params.0","params.1"],"path":"dist/server/commands/library/dropbox.js","source":"src/server/commands/library/dropbox.ts"},"cli":{"inject":["$container","options.library","options.type","options.name","options.season","options.episode","options.album","options.artist"],"options":{"library":{},"type":{},"name":{"needsValue":true},"season":{"needsValue":true},"episode":{"needsValue":true},"album":{"needsValue":true},"artist":{"needsValue":true}},"usage":"dropbox <library> <type>"},"":{"inject":["$container","params.0","params.1"]}}},{"name":"import","config":{"fs":{"inject":["$container","params.0","params.1"],"path":"dist/server/commands/library/import.js","source":"src/server/commands/library/import.ts"},"cli":{"inject":["$container","options.library","options.targetLibrary","options.type"],"options":{"library":{},"type":{}},"usage":"import <library> <targetLibrary> [type]"},"":{"inject":["$container","params.0","params.1"]}}},{"name":"list-credentials","config":{"fs":{"inject":[],"path":"dist/server/commands/library/list-credentials.js","source":"src/server/commands/library/list-credentials.ts"},"":{"inject":[]},"cli":{"inject":["options.type"],"usage":"list scrappers [type]"}}},{"name":"list-folders","config":{"fs":{"inject":["params.0"],"path":"dist/server/commands/library/list-folders.js","source":"src/server/commands/library/list-folders.ts"},"":{"inject":["params.0"]},"cli":{"inject":["options.library"],"options":{"library":{"needsValue":true}},"usage":"list folders <library>"}}},{"name":"list-libraries","config":{"fs":{"inject":[],"path":"dist/server/commands/library/list-libraries.js","source":"src/server/commands/library/list-libraries.ts"},"":{"inject":[]},"cli":{"inject":[],"usage":"list libraries"}}},{"name":"list-organizers","config":{"fs":{"inject":[],"path":"dist/server/commands/library/list-organizers.js","source":"src/server/commands/library/list-organizers.ts"},"":{"inject":[]},"cli":{"inject":["options.type"],"usage":"list organizers [type]"}}},{"name":"list-scrappers","config":{"fs":{"inject":[],"path":"dist/server/commands/library/list-scrappers.js","source":"src/server/commands/library/list-scrappers.ts"},"":{"inject":[]},"cli":{"inject":["options.type","options.global"],"options":{"global":{"needsValue":false,"aliases":["g"]}},"usage":"list scrappers [type]"}}},{"name":"register-organizer","config":{"fs":{"inject":["$container","$container","params.0","params.1"],"path":"dist/server/commands/library/register-organizer.js","source":"src/server/commands/library/register-organizer.ts"},"":{"inject":["$container","$container","params.0","params.1"]},"jsonrpc":{"inject":["$container","connectionAsContainer","params.0","params.1"]},"cli":{"inject":["$container","options.file","options.type","options"],"usage":"organizer register <type> <name> <file>","options":{"file":{"normalize":true,"needsValue":true}}}}},{"name":"register-scrapper","config":{"fs":{"inject":["$container","$container","params.0","params.1"],"path":"dist/server/commands/library/register-scrapper.js","source":"src/server/commands/library/register-scrapper.ts"},"":{"inject":["$container","$container","params.0","params.1"]},"jsonrpc":{"inject":["$container","connectionAsContainer","params.0","params.1"]},"cli":{"inject":["$container","options.file","options.type","options"],"usage":"scrapper register <type> <name> <file>","options":{"file":{"normalize":true,"needsValue":true}}}}},{"name":"reorganize","config":{"fs":{"inject":["$container","params.0","params.1"],"path":"dist/server/commands/library/reorganize.js","source":"src/server/commands/library/reorganize.ts"},"cli":{"inject":["$container","options.library","options.type"],"options":{"library":{},"type":{}},"usage":"reorganize <library> [type]"},"":{"inject":["$container","params.0","params.1"]}}},{"name":"rm-credentials","config":{"fs":{"inject":["params.0"],"path":"dist/server/commands/library/rm-credentials.js","source":"src/server/commands/library/rm-credentials.ts"},"cli":{"inject":["options.host"],"options":{},"usage":"rm credentials <host>"},"":{"inject":["params.0"]}}},{"name":"rm-folder","config":{"fs":{"inject":["params.0","params.1"],"path":"dist/server/commands/library/rm-folder.js","source":"src/server/commands/library/rm-folder.ts"},"cli":{"inject":["options.name","options.path"],"options":{"name":{},"path":{"normalize":true}},"usage":"rm folder <name> <path>"},"":{"inject":["params.0","params.1"]}}},{"name":"rm-library","config":{"fs":{"inject":["params.0"],"path":"dist/server/commands/library/rm-library.js","source":"src/server/commands/library/rm-library.ts"},"cli":{"inject":["options.name"],"options":{"name":{},"path":{"normalize":true}},"usage":"rm library <name>"},"":{"inject":["params.0"]}}},{"name":"rm-organizer","config":{"fs":{"inject":["params.0","params.1"],"path":"dist/server/commands/library/rm-organizer.js","source":"src/server/commands/library/rm-organizer.ts"},"cli":{"inject":["options.name","options.organizer"],"options":{"name":{},"path":{}},"usage":"rm organizer <library> <organizer>"},"":{"inject":["params.0","params.1"]}}},{"name":"rm-scrapper","config":{"fs":{"inject":["params.0","params.1"],"path":"dist/server/commands/library/rm-scrapper.js","source":"src/server/commands/library/rm-scrapper.ts"},"cli":{"inject":["options.name","options.scrapper"],"options":{"name":{},"path":{}},"usage":"rm scrapper <name> <scrapper>"},"":{"inject":["params.0","params.1"]}}},{"name":"scrap","config":{"fs":{"inject":["$container","params.0","params.1"],"path":"dist/server/commands/library/scrap.js","source":"src/server/commands/library/scrap.ts"},"":{"inject":["$container","params.0","params.1"]},"jsonrpc":{"inject":["$container","params.0","params.1"]},"cli":{"inject":["$container","options.path","context.args"],"options":{"path":{"needsValue":true,"normalize":true}},"usage":"scrap <path> [...scrappers]"}}},{"name":"set-index-folder","config":{"fs":{"inject":["params.0"],"path":"dist/server/commands/library/set-index-folder.js","source":"src/server/commands/library/set-index-folder.ts"},"cli":{"inject":["options.path"],"options":{"path":{"normalize":true}},"usage":"set-index-folder <path>"},"":{"inject":["params.0"]}}},{"name":"transcode","config":{"fs":{"inject":["params.0","params.1","params.2","params.3"],"path":"dist/server/commands/library/transcode.js","source":"src/server/commands/library/transcode.ts"},"cli":{"inject":["options.library","options.outType","options.inType","options.type"],"usage":"transcode <library> <outType> [inType] [type]"},"":{"inject":["params.0","params.1","params.2","params.3"]}}},{"name":"update-index","config":{"fs":{"inject":["$container","params.0","params.1","params.2"],"path":"dist/server/commands/library/update-index.js","source":"src/server/commands/library/update-index.ts"},"cli":{"inject":["$container","options.library","options.type","options"],"options":{"force":{"aliases":["f"],"needsValue":false},"library":{},"type":{},"rescrap":{"needsValue":false},"name":{"needsValue":true},"season":{"needsValue":true},"episode":{"needsValue":true},"album":{"needsValue":true},"artist":{"needsValue":true}},"usage":"update-index <library> <type>"},"":{"inject":["$container","params.0","params.1","params.2"]}}}],"$schema":"https://raw.githubusercontent.com/npenin/akala/main/packages/commands/container-schema.json"} as Metadata.Container;

   export function connect(processor?:ICommandProcessor) {
            const container = new Container<void>("library", void 0);
            registerCommands(meta.commands, processor, container);
            return container as container & Container<void>;
        }
}

export { library as default };