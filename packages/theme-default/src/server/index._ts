import * as akala from '@akala/core'
import * as client from '@akala/client'
import { IconName, IconPrefix } from '@fortawesome/fontawesome-common-types'

export interface Tile
{
  text: string,
  icon?: IconName,
  iconLibrary?: IconPrefix,
  url?: string | Promise<string>,
  cmd?: string,
  color?: BlockColors;
  click?(...args: any[]): boolean | void;
}

export enum BlockColors
{
  black,
  blue,
  brown,
  green,
  lime,
  magenta,
  orange,
  pink,
  purple,
  red,
  viridian,
}

akala.module('@domojs/devices', '@domojs/theme-default').activate(['$injector'], function (module: akala.Module)
{
  var list: akala.ObservableArray<Tile> = new akala.ObservableArray<Tile>([]);

  module.register('tiles', {
    add(tile: Tile)
    {
      list.push(tile);
    },
    array: list
  })

  @client.control()
  class BlockColor extends client.BaseControl<string>
  {
    constructor()
    {
      super('color');
    }

    public apply(target: client.IScope<any>, element: Element, parameter: akala.Binding | string): any
    {
      if (parameter instanceof akala.Binding)
      {
        parameter.onChanged(function (e)
        {
          var color = e.eventArgs.value;
          if (typeof color == 'undefined')
            color = Math.floor(Math.random() * Object.keys(BlockColors).length / 2);

          if (akala.isPromiseLike(e.eventArgs.value))
            e.eventArgs.value.then((value) => { element.classList.add('block-' + BlockColors[value]) });
          else if (typeof e.eventArgs.value == 'undefined')
            element.classList.add('block-' + BlockColors[color]);
        });
      }
      else 
      {
        if (typeof parameter == 'undefined')
          parameter = BlockColors[Math.floor(Math.random() * Object.keys(BlockColors).length / 2)];
        element.classList.add('block-' + parameter);
      }
    }
  }

  module.ready(['akala-services.$part'], function (part: client.Part)
  {
    part.use('/', 'body', {
      template: '/views/tiles.html', controller: function (scope)
      {
        scope['list'] = list;

        scope['tileClick'] = function (tile: Tile, $location: client.LocationService, $http: akala.Http)
        {
          if (tile.url)
            if (akala.isPromiseLike(tile.url))
              tile.url.then(function (url) { $location.show(url) });
            else
              $location.show(tile.url);
          if (tile.cmd)
            $http.get(tile.cmd)
        }

      }
    });
  });
}).start();